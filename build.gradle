plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'com.enonic.defaults' version '2.1.5'
    id 'com.enonic.xp.base' version '3.6.1'
}

repositories {
    mavenLocal()
    mavenCentral()
    xp.enonicRepo()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

configurations {
    includeLib { transitive = false }
}

dependencies {
    compileOnly "com.enonic.xp:script-api:${xpVersion}"

    implementation "com.cronutils:cron-utils:9.2.1"
    includeLib "com.cronutils:cron-utils:9.2.1"

    testImplementation "com.enonic.xp:testing:${xpVersion}"
    testImplementation(platform("org.junit:junit-bom:5.12.2"))
    testImplementation(platform("org.mockito:mockito-bom:5.17.0"))
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.slf4j:slf4j-log4j12:2.0.17'
    testImplementation 'org.apache.felix:org.apache.felix.framework:7.0.5'
    testImplementation 'org.ops4j.pax.tinybundles:tinybundles:4.0.1'
}

tasks.register('copyLibFiles', Copy) {
    def libFile = file(configurations.includeLib.singleFile)
    def libFiles = zipTree(libFile)

    def classSpec = copySpec {
        from libFiles
        include "**/*.**"
        exclude "META-INF/**"
    }

    into layout.buildDirectory.dir("classes/java/main") with classSpec
}

processResources.dependsOn copyLibFiles

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
}

check.dependsOn jacocoTestReport

test {
    useJUnitPlatform()
}
